#!/usr/bin/env python3
#
# Sequestrum - Dotfile Manager

# Libraries
import sys
import yaml
from pathlib import Path

homePath = str(Path.home()) + "/"
sys.path.insert(0, homePath + "/Sequestrum/Modules")

# Modules
import directoryModule as dirMod
import symlinkModule as symMod
import argumentsModule as argMod
import commandsModule as comMod

# For Later
packagesToUnlink = []

# Grab user inputted arguments from the module and make sure they entered some.
arguments = argMod.getArguments()

if arguments is None:
    print("Sequestrum: Must enter arguments")
    sys.exit()


# Creates a new directory. It creates a new folder path using the config
# then creates a new folder using that path. It then loops through each
# link in the links list and **copies** (not symlinking) the original file
# on the source system over to the dotfiles.


def setupPackage(packageKey):
    """
        Setup package directory on dotfile
    """
    # Make a path for the new directory path using the name specified in the
    # config then make the folder using the path.
    newPackagePath = dotfilePath + \
        configDict['options'][packageKey]['directoryName'] + "/"
    dirMod.createFolder(newPackagePath)

    for link in configDict['options'][packageKey]['links']:
        for key, value in link.items():
            sourceFile = homePath + value
            destFile = newPackagePath + key

            if symMod.symlinkLocationExists(sourceFile):
                if dirMod.isFolder(sourceFile):
                    symMod.copyFolder(sourceFile, destFile)
                    dirMod.deleteFolder(sourceFile)
                elif dirMod.isFile(sourceFile):
                    symMod.copyFile(sourceFile, destFile)
                    dirMod.deleteFile(sourceFile)
                else:
                    return False
            else:
                return False
    return True


# Grabs the directory of the key. For each item in the dotfile directory,
# properly symlink the file to the right place. If the file on the local
# system already exists. Delete the existing file before symlinking to
# prevent issues.


def installPackage(packageKey):
    """
        Install package to local system
    """
    # Grab dotfile package directory
    directoryPath = dotfilePath + \
        configDict['options'][packageKey]['directoryName'] + "/"

    # Loop through files to link
    for link in configDict['options'][packageKey]['links']:
        # Symlink files to local files
        for key, value in link.items():
            sourceFile = directoryPath + key
            destFile = homePath + value

            # Make sure file exists in dotfiles
            if symMod.symlinkLocationExists(sourceFile):
                if dirMod.isFolder(sourceFile):
                    symMod.createSymlink(sourceFile, destFile)
                elif dirMod.isFile(sourceFile):
                    symMod.createSymlink(sourceFile, destFile)
                else:
                    return False
            else:
                return False
    return True


def GetPackagesToUnlink(packageKey):
    """
        Grab packages and put them into a list ( NO DUPES )
    """
    directoryPath = dotfilePath + configDict['options'][packageKey]['directoryName'] + "/"

    for link in configDict['options'][packageKey]['links']:
        for key, value in link.items():
            fileToGrab = homePath + value

            if fileToGrab not in packagesToUnlink:
                packagesToUnlink.append(fileToGrab)

def UnlinkPackages():
    """
        Unlink all files in packagesToUnlink
    """
    for path in packagesToUnlink:
        if dirMod.isFolder(path):
            dirMod.deleteFolder(path)
        elif dirMod.isFile(path):
            dirMod.deleteFile(path)
        else:
            print("[Sequestrum] HOW THE FUCK DID THIS HAPPEN")

# Goes through all the file locations that need to be empty for the
# symlinking to work and checks to see if they're empty. If they're not,
# it will return false. If it is clean, it'll return true.


def checkInstallLocations(packageKey):
    """
        Checks to see if link locations are clean
    """
    for link in configDict['options'][packageKey]['links']:
        for key, value in link.items():
            destPath = homePath + value
            if symMod.symlinkLocationExists(destPath):
                return False

    return True

# Checks to see if the file locations in the dotfile repository exist. If
# they do, return false. If they don't, return true. This is to prevent
# overwriting of file that may or may not be importtant to the user.


def checkSourceLocations(packageKey):
    """
        Check to see if dotfile locations are clean
    """
    directoryPath = dotfilePath + \
        configDict['options'][packageKey]['directoryName'] + "/"

    for link in configDict['options'][packageKey]['links']:
        for key, value in link.items():
            sourcePath = directoryPath + key

            if symMod.symlinkLocationExists(sourcePath):
                return False

    return True


configFile = open("config.yaml", "r")
configDict = yaml.load(configFile)
directoryList = []

# Grab list of directories from the config.
for key, value in configDict['options'].items():
    if key.endswith("Package"):
        print(key[:-7])
        directoryList.append(key[:-7])
        

# Grab the path of the dotfile directory
dotfilePath = homePath + \
    configDict['options']['base']['dotfileDirectory'] + "/"

# Setups up the dotfiles accordingly to the config. This should only be
# ran once to setup your dotfiles with the right directories. After this,
# users should use the update argument to update their dotfiles with new
# packages.
if arguments[0] == "Setup":
    if arguments[1] == "all":
        for key, value in configDict['options'].items():
            if key.endswith("Package"):
                if not checkSourceLocations(key):
                    print(
                        "Sequestrum: Dotfile location is occupied. Please check config file.")
                    sys.exit()

        for key, value in configDict['options'].items():
            if key.endswith("Package"):
                if "commandsBefore" in value:
                    comMod.runCommands(
                        configDict['options'][key]["commandsBefore"])
                setupPackage(key)
                if "commandsAfter" in value:
                    comMod.runCommands(
                        configDict['options'][key]["commandsBefore"])
    else:
        print("Valid Usage: sequestrum -s")

# Install the files from the dotfiles. Symlinks the files from the
# specified packages to the local system files. If the file or folder
# already exists on the local system, delete it then symlink properly to
# avoid errors.
elif arguments[0] == "Install":
    # Install all packages
    if arguments[1] == "all":
        for key, value in configDict['options'].items():
            if key.endswith("Package"):
                if not checkInstallLocations(key):
                    print(
                        "Sequestrum: Install locations are occupied. Check config file.")
                    sys.exit()

        for key, value in configDict['options'].items():
            if key.endswith("Package"):
                if "commandsBefore" in value:
                    comMod.runCommands(
                        configDict['options'][key]["commandsBefore"])
                installPackage(key)
                if "commandsAfter" in value:
                    comMod.runCommands(
                        configDict['options'][key]["commandsBefore"])

    # The option to only install one package instead of all your dotfiles.
    elif arguments[1] in directoryList:
        for key, value in configDict['options'].items():
            if key == arguments[1] + "Package":
                if not checkInstallLocations(key):
                    print(
                        "Sequestrum: Install locations are occupied. Check config file.")
                    sys.exit()

        for key, value in configDict['options'].items():
            if key == arguments[1] + "Package":
                if "commandsBefore" in value:
                    comMod.runCommands(
                        configDict['options'][key]["commandsBefore"])
                installPackage(key)
                if "commandsAfter" in value:
                    comMod.runCommands(
                        configDict['options'][key]["commandsBefore"])
    else:
        print("Invalid Package")

elif arguments[0] == "Unlink":
    if arguments[1] == "all":
        for key, value in configDict['options'].items():
            if key.endswith("Package"):
                GetPackagesToUnlink(key)
        UnlinkPackages()
    elif arguments[1] in directoryList:
        for key, value in configDict['options'].items():
            if key == arguments[1] + "Package":
                GetPackagesToUnlink(key)
        UnlinkPackages()
    else:
        print("Sequestrum: Invalid Package")
else:
    print("Invalid Command")
